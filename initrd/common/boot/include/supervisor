#!/bin/sh

set -o pipefail

is_restart_event=''
supervise_dir="/srv/storage/system/supervisor"

_safe_waitpid()
{
  local pid="$1"

  EINTR=0
  wait "$pid"
  
  local status="$?"
  
  while [ "$EINTR" -gt 0 ]; do
    EINTR=0
    wait "$pid"
    status="$?"
  done
  
  return "$status"
} 

_supervisor_process()
{
  local package="`basename "$1"`"
  local service="`basename "$2"`"

  local pkg_supervise_dir="$supervise_dir/$package"
  local pkg_status_dir="$pkg_supervise_dir/status"

  local log="$pkg_supervise_dir/logs/$service.log"

  trap 'EINTR=1; _supervisor_resync_trap "$package" "$service"' HUP
  trap 'EINTR=1; _supervisor_restart_trap "$package" "$service"' USR1
  trap 'EINTR=1; _supervisor_termination_trap "$package" "$service"' TERM

  echo "`date`: Starting _supervisor_process for '$package/$service'" \
    >> "$log"

  while true; do

    mkdir -p "$pkg_status_dir" "$pkg_supervise_dir/logs"

    # Is service down?
    #   If so, block on the FIFO; a write is our signal to resume.
    
    local svc_down_fifo="$pkg_status_dir/$service.down"
    
    if [ -p "$svc_down_fifo" ]; then
      read < "$svc_down_fifo" &>/dev/null
      rm -f "$svc_down_fifo"
    fi

    # Fork-and-exec:
    #  This attempts to start the supervised process.

    echo "`date`: Starting run script for '$package/$service'" >> "$log"
    ( exec "/srv/scripts/$package/run/$service" >> "$log" 2>&1 ) &

    local pid="$!"
    local pid_file="$pkg_status_dir/$service.pid"
    local restart_file="$pkg_status_dir/$service.restart"

    echo "`date`: Started '$package/$service'; pid is '$pid'" >> "$log"

    echo "$pid" > "$pid_file" \
      || echo "`date`: Failed to create '$pid_file'" >> "$log"

    rm -f "$restart_file" \
      || echo "`date`: Failed to remove '$restart_file'" >> "$log"

    _safe_waitpid "$pid"
    local status="$?"

    rm -f "$pid_file" \
      || echo "`date`: Failed to remove '$pid_file'" >> "$log"
    
    if [ "$status" -eq 0 ]; then
      echo "`date`: Service '$package/$service' (pid '$pid') "
        "exited with normal status" >> "$log"
    else
      echo "`date`: Service '$package/$service' (pid '$pid') " \
        "exited with non-zero status '$status'" >> "$log"

      if [ "$is_restart_event" ]; then
        is_restart_event=''
      else
        sleep 5
      fi
    fi

    rm -f "$svc_status_fifo"
    echo "`date`: Restarting service '$package/$service'" >> "$log"
  done
}

_supervisor_termination_trap()
{
  local package="$1"
  local service="$2"

  _supervisor_terminate_service "$package" "$service"
  exit "$?"
}

_supervisor_restart_trap()
{
  local package="$1"
  local service="$2"

  local restart_file="$supervise_dir/$package/status/$service.restart"
  touch "$restart_file"

  is_restart_event='t'
  _supervisor_terminate_service "$package" "$service"
}

_supervisor_resync_trap()
{
  local package="$1"
  local service="$2"

  local pkg_supervise_dir="$supervise_dir/$package"
  local svc_down_fifo="$pkg_supervise_dir/status/$service.down"

  echo "`date`: Resync signal received for '$package/$service'" >> "$log"

  if supervisor_is_service_running "$package" "$service"; then

    if [ -p "$svc_down_fifo" ]; then
      echo "`date`: Resync is terminating '$package/$service'" >> "$log"
      _supervisor_terminate_service "$package" "$service"
    fi

  fi
  
  return 0
}

_start_supervisor_process()
{
  local package="$1"
  local service="$2"

  local pkg_supervise_dir="$supervise_dir/$package"
  local ppid_dir="$pkg_supervise_dir/status"
  local ppid_file="$ppid_dir/$service.ppid"

  mkdir -p "$ppid_dir" || return 1

  supervisor_service_exists "$package" "$service" || return 2
  supervisor_is_service_watched "$package" "$service" && return 3

  # Start supervisor:
  #   This actually starts the supervisor process; it, in
  #   turn, forks off the actual service to-be-watched.

  ( _supervisor_process "$package" "$service" &>/dev/null ) &

  # Write PPID file:
  #   This file contains the PID of the supervisor process.

  local ppid="$!"
  echo "$ppid" > "$ppid_file"

  if [ "$?" -ne 0 ]; then
    warn "Failed to create PID file for '$package/$service'"
    warn "Terminating supervisor process '$pid'"

    kill -KILL "$ppid"
    return 5
  fi

  return 0
}

_create_service_termination_fifo()
{
  local package="$1"
  local service="$2"

  # Termination-status FIFO:
  #   This is used to wait for service termination, as well as
  #   to relay status messages during the termination process.

  local svc_term_fifo="$supervise_dir/$package/status/$service.term"

  if ! mkfifo -m 0640 "$svc_term_fifo"; then
    warn "Failed to create termination FIFO for '$package/$service'"
    return 1
  fi

  return 0
}

_delete_service_termination_fifo()
{ 
  local package="$1"
  local service="$2"

  local svc_term_fifo="$supervise_dir/$package/status/$service.term"

  if ! rm -f "$svc_term_fifo"; then
    warn "Failed to delete termination FIFO for '$package/$service'"
    return 1
  fi

  return 0
}

_wait_for_service_termination()
{
  local package="$1"
  local service="$2"

  local exit_status=''
  local pkg_status_dir="$supervise_dir/$package/status"
  local svc_term_fifo="$pkg_status_dir/$service.term"

  while [ -z "$exit_status" ] ; do
    while read line; do
    
      # Did we read a number?
      #   If so, this is the supervisor's exit status.

      if [ "$line" -ge 0 ] 2>/dev/null; then
        exit_status="$line"
        break;
      fi
      
      # Did we read something else?
      #   If so, this is a status message; print it as a warning.

      warn "$line"
      
    done < "$svc_term_fifo"
  done

  if [ "$exit_status" -ne 0 ]; then
    warn "Service '$package/$service' exited with status '$exit_status'"
  fi

  return 0
}

_pid_has_active_process()
{
  local pid="`basename "$1"`"

  test -d "/proc/$pid"
  return "$?"
}

_pidfile_has_active_process()
{
  local pid_file="$1"
  
  if ! [ -f "$pid_file" ]; then
    return 2
  fi

  local pid="`cat "$pid_file" 2>/dev/null`"

  if ! [ "$pid" ]; then
    return 3
  fi

  _pid_has_active_process "$pid"
  return "$?"
}

_termination_status_send()
{
  local package="$1"
  local service="$2"
  shift 2

  local pkg_status_dir="$supervise_dir/$package/status"
  local svc_term_fifo="$pkg_status_dir/$service.term"

  for str in "$@"; do
    if [ -p "$svc_term_fifo" ]; then
      echo "$str" > "$svc_term_fifo"
    else
      if [ "$str" -ge 0 ] 2>/dev/null; then
        str="Service exited with status '$str'"
      fi
      echo "'$package/$service': $str" >> "$log"
    fi
  done

  return "$?"
}

_terminate_supervisor_process()
{
  local package="$1"
  local service="$2"
  
  supervisor_service_exists "$package" "$service" || return 1

  local pkg_status_dir="$supervise_dir/$package/status"
  local ppid_file="$pkg_status_dir/$service.ppid"
  
  if ! supervisor_is_service_watched "$package" "$service"; then
    return 2
  fi
  
  local ppid="`cat "$ppid_file" 2>/dev/null`"

  if ! [ "$ppid" ]; then
    return 3
  fi

  _create_service_termination_fifo "$package" "$service" \
    || return 4

  rm -f "$ppid_file" "$pkg_status_dir/$service.down" &&
  kill -TERM "$ppid" 2>/dev/null

  if [ "$?" -ne 0 ]; then
    warn "Couldn't send signal to supervisor of '$package/$service'"
    return 5
  fi

  _wait_for_service_termination "$package" "$service" \
    || return 6

  _delete_service_termination_fifo "$package" "$service" \
    || return 7

  return 0
}

_supervisor_terminate_service()
{
  local package="$1"
  local service="$2"

  local max_terminate_attempts='5'
  local termination_wait_interval='2'
  
  local pkg_status_dir="$supervise_dir/$package/status"
  local pid_file="$pkg_status_dir/$service.pid"

  if ! [ -f "$pid_file" ]; then
    return 0
  fi

  local pid="`cat "$pid_file" 2>/dev/null`"

  if -z [ "$pid" ]; then

    _termination_status_send "$package" "$service" \
      "Process identifier is missing from '$pid_file'" \
      'You may need to manually remove the file and retry'

    _termination_status_send "$package" "$service" '255'
    return 255
  fi

  if ! rm -f "$pid_file"; then

    _termination_status_send "$package" "$service" \
      "Failed to remove file '$pid_file'" \
      'Ensure you have write access to package status directories'

    _termination_status_send "$package" "$service" '254'
    return 254
  fi

  for i in `seq 1 "$max_terminate_attempts"`; do
    kill -TERM "$pid" 2>/dev/null
    if ! _pid_has_active_process "$pid"; then
      break;
    else
      sleep "$termination_wait_interval"
      _termination_status_send "$package" "$service" \
        "Service '$package/$service' remains running; retrying"
    fi
  done

  if _pid_has_active_process "$pid"; then
    
    _termination_status_send "$package" "$service" \
      "Process in package '$package/$service' did not terminate" \
      "Forcibly killing process with PID '$pid'..."

    kill -KILL "$pid" 2>/dev/null
    sleep "$termination_wait_interval"
  fi

  wait "$pid"
  local exit_status="$?"

  _termination_status_send "$package" "$service" "$exit_status"
  return "$exit_status"
}

_supervisor_apply()
{
  local operation="$1"
  local function="$2"
  local package="$3"

  shift 3
  
  local rv='0'
  local services="$@"

  if ! [ -d "/srv/scripts/$package" ]; then
    warn "Unable to locate package '$package'"
    return 255
  fi

  supervisor_package_exists "$package" || return 255

  if [ "$#" -le 0 ]; then
    services="/srv/scripts/$package/run"/*
  fi

  for service in $services; do
  
    local service="`basename "$service"`"

    if [ "$#" -le 0 -a "$service" = '*' ]; then
      warn "Unable to locate any services for package '$package'"
      return 255
    fi

    supervisor_service_exists "$package" "$service" || return 255

    if supervisor_is_service_disabled "$package" "$service"; then
      continue
    fi

    "$function" "$package" "$service"
      
    if [ "$?" -ne 0 ]; then
      rv="$(($rv + 1))"
      warn "Failed to $operation supervisor for '$package/$service'"
    fi
  done

  return "$rv"
}

supervisor_start()
{
  local package="`basename "$1"`"
  shift 1

  _supervisor_apply 'start' _start_supervisor_process "$package" "$@"
  return "$?"
}

supervisor_stop()
{
  local package="`basename "$1"`"
  shift 1

  _supervisor_apply 'stop' _terminate_supervisor_process "$package" "$@"
  return "$?"
}

supervisor_reset()
{
  if [ -d "$supervise_dir" ]; then
    for p in '*.down' '*.term'; do
      find "$supervise_dir" -type p -name "$p" -exec rm -f {} \; \
        || return 1
    done
    for f in '*.pid' '*.ppid'; do
      find "$supervise_dir" -type f -name "$f" -exec rm -f {} \; \
        || return 2
    done
  fi

  return 0
}

supervisor_service_disable()
{
  local package="`basename "$1"`"
  local service="`basename "$2"`"

  supervisor_service_exists "$package" "$service" || return 1
    
  if supervisor_is_service_disabled "$package" "$service"; then
    warn "Service '$package/$service' is already disabled"
    return 2
  fi

  if supervisor_is_service_watched "$package" "$service"; then
    if ! supervisor_stop "$package" "$service"; then
      warn "Failed to stop supervisor for '$package/$service'"
      return 3
    fi
  fi
  
  touch "$supervise_dir/$package/status/$service.disabled"
  return 0
}

supervisor_service_enable()
{
  local package="`basename "$1"`"
  local service="`basename "$2"`"

  supervisor_service_exists "$package" "$service" || return 1

  if ! supervisor_is_service_disabled "$package" "$service"; then
    warn "Service '$package/$service' is not currently disabled"
    return 2
  fi

  rm -f "$supervise_dir/$package/status/$service.disabled"

  if ! supervisor_start "$package" "$service"; then
    warn "Failed to start supervisor for '$package/$service'"
    return 3
  fi

  return 0
}

supervisor_service_down()
{
  local package="`basename "$1"`"
  local service="`basename "$2"`"

  supervisor_service_exists "$package" "$service" || return 1

  if ! supervisor_is_service_watched "$package" "$service"; then
    warn "Supervisor is not running for '$package/$service'"
    return 2
  fi
  
  if supervisor_is_service_down "$package" "$service"; then
    warn "Service '$package/$service' is already down"
    return 3
  fi

  _create_service_termination_fifo "$package" "$service" \
    || return 4

  local pkg_supervise_dir="$supervise_dir/$package"
  local ppid="`cat "$pkg_supervise_dir/status/$service.ppid"`"
  local svc_down_fifo="$pkg_supervise_dir/status/$service.down"
  
  rm -f "$svc_down_fifo" &&
  mkfifo -m 0600 "$svc_down_fifo" &&
  kill -HUP "$ppid" 2>/dev/null || return 5
  
  _wait_for_service_termination "$package" "$service" \
    || return 6

  _delete_service_termination_fifo "$package" "$service" \
    || return 7

  return 0
}

supervisor_service_up()
{
  local package="`basename "$1"`"
  local service="`basename "$2"`"

  supervisor_service_exists "$package" "$service" || return 1

  if supervisor_is_service_disabled "$package" "$service"; then
    warn "Service '$package/$service' is currently disabled"
    return 2
  fi

  if ! supervisor_is_service_watched "$package" "$service"; then
    warn "Supervisor is not running for '$package/$service'"
    return 3
  fi

  if ! supervisor_is_service_down "$package" "$service"; then
    warn "Service '$package/$service' is already running"
    return 4
  fi

  # Write to the FIFO:
  #   This unblocks `_supervisor_process` and starts the service.
  #   If, for some reason, the supervisor isn't listening at the
  #   other end, we'll remain blocked until a supervisor shows up.
  
  local pkg_supervise_dir="$supervise_dir/$package"
  local svc_down_fifo="$pkg_supervise_dir/status/$service.down"

  echo '1' > "$svc_down_fifo" || return 5
  return 0
}

supervisor_service_restart()
{
  local package="`basename "$1"`"
  local service="`basename "$2"`"

  supervisor_service_exists "$package" "$service" || return 1

  if supervisor_is_service_disabled "$package" "$service"; then
    warn "Service '$package/$service' is currently disabled"
    return 2
  fi

  if ! supervisor_is_service_watched "$package" "$service"; then
    warn "Supervisor is not running for '$package/$service'"
    return 3
  fi
  
  if supervisor_is_service_down "$package" "$service"; then
    warn "Service '$package/$service' is down"
    return 4
  fi

  if ! supervisor_is_service_running "$package" "$service"; then
    warn "Service '$package/$service' is not currently running"
    return 5
  fi

  _create_service_termination_fifo "$package" "$service" \
    || return 6

  local pkg_supervise_dir="$supervise_dir/$package"
  local ppid="`cat "$pkg_supervise_dir/status/$service.ppid" 2>/dev/null`"

  kill -USR1 "$ppid" 2>/dev/null || return 7
  
  _wait_for_service_termination "$package" "$service" \
    || return 8

  _delete_service_termination_fifo "$package" "$service" \
    || return 9

  return 0
}

supervisor_service_reload()
{
  local package="`basename "$1"`"
  local service="$2"

  supervisor_service_exists "$package" "$service" || return 1

  if ! supervisor_is_service_running "$package" "$service"; then
    warn "Service '$package/$service' is not currently running"
    return 2
  fi

  local pkg_supervise_dir="$supervise_dir/$package"
  local pid="`cat "$pkg_supervise_dir/status/$service.pid"`"

  kill -HUP "$pid" 2>/dev/null || return 3
  return 0
}

supervisor_list_all_packages()
{
  for package in "/srv/scripts"/*; do
    package="`basename "$package"`"
    if [ "$package" != '*' -a "$package" != 'system' ]; then
      echo "$package"
    fi
  done
  
  return 0
}

supervisor_list_all_services()
{
  local package="`basename "$1"`"

  for service in "/srv/scripts/$package/run"/*; do
    service="`basename "$service"`"
    if [ "$service" != '*' ]; then
      echo "$service"
    fi
  done

  return 0
}

supervisor_list_services_filtered()
{
  local package="`basename "$1"`"
  shift 1
  
  supervisor_list_all_services "$package" | while read service; do
    if "$@" "$package" "$service"; then
      echo "$service"
    fi
  done

  return 0
}

supervisor_list_restarting_services()
{
  local package="`basename "$1"`"

  supervisor_list_services_filtered \
    "$package" supervisor_is_service_restarting
}

supervisor_list_enabled_services()
{
  local package="`basename "$1"`"
  
  supervisor_list_services_filtered \
    "$package" supervisor_is_service_enabled
}

supervisor_list_disabled_services()
{
  local package="`basename "$1"`"
  
  supervisor_list_services_filtered \
    "$package" supervisor_is_service_disabled
}

supervisor_list_watched_services()
{
  local package="`basename "$1"`"

  # List services where supervisor is running:
  #   Loop over control data to avoid iterating through everything.
  
  for service in "$supervise_dir/$package/status"/*.ppid; do
    service="`basename "$service" .ppid`"
    if [ "$service" != '*' ]; then
      if supervisor_is_service_watched "$package" "$service"; then
        echo "$service"
      fi
    fi
  done

  return 0
}

supervisor_list_running_services()
{
  local package="`basename "$1"`"

  # List services where intended process is running:
  #   Loop over control data to avoid iterating through everything.
  
  for service in "$supervise_dir/$package/status"/*.pid; do
    service="`basename "$service" .pid`"
    if [ "$service" != '*' ]; then
      if supervisor_is_service_running "$package" "$service"; then
        echo "$service"
      fi
    fi
  done

  return 0
}

supervisor_list_down_services()
{
  local package="`basename "$1"`"
  
  supervisor_list_services_filtered \
    "$package" supervisor_is_service_down
}

supervisor_list_expected_services()
{
  local package="`basename "$1"`"

  supervisor_list_services_filtered \
    "$package" supervisor_is_service_expected
}

supervisor_list_unexpected_services()
{
  local package="`basename "$1"`"

  supervisor_list_services_filtered \
    "$package" supervisor_is_service_unexpected
}

supervisor_is_service_restarting()
{
  local package="`basename "$1"`"
  local service="`basename "$2"`"
  
  test -f "$supervise_dir/$package/status/$service.restart"
}

supervisor_is_service_disabled()
{
  local package="`basename "$1"`"
  local service="`basename "$2"`"
  
  test -f "$supervise_dir/$package/status/$service.disabled"
}


supervisor_is_service_enabled()
{
  test ! supervisor_is_service_disabled "$@"  
}

supervisor_is_service_watched()
{
  local package="`basename "$1"`"
  local service="`basename "$2"`"
  
  _pidfile_has_active_process \
    "$supervise_dir/$package/status/$service.ppid"
}

supervisor_is_service_running()
{
  local package="`basename "$1"`"
  local service="`basename "$2"`"

  _pidfile_has_active_process \
    "$supervise_dir/$package/status/$service.pid"
}

supervisor_is_service_down()
{
  local package="`basename "$1"`"
  local service="`basename "$2"`"

  test -p "$supervise_dir/$package/status/$service.down"
}

supervisor_is_service_expected()
{
  supervisor_service_exists "$@" || return 1
  supervisor_is_service_down "$@" && return 2
  supervisor_is_service_disabled "$@" && return 3
  supervisor_is_service_restarting "$@" && return 4

  return 0
}

supervisor_is_service_unexpected()
{
  test ! supervisor_is_service_expected "$@"
}

supervisor_package_exists()
{
  local package="`basename "$1"`"

  if ! [ -d "/srv/scripts/$package" ]; then
    warn "Package '$package' does not exist"
    return 1
  fi

  return 0
}

supervisor_service_exists()
{
  local package="`basename "$1"`"
  local service="`basename "$2"`"

  if ! [ -x "/srv/scripts/$package/run/$service" ]; then
    warn "Service '$package/$service' does not exist"
    return 1
  fi

  return 0
}
