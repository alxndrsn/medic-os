#!/bin/sh

set -o pipefail

package_extract_metadata()
{
  local path="$1"
  local metadata_key="$2"

  if ! [ -r "$path" ]; then
    return 1
  fi

  ar -p "$path" "$metadata_key" 2>/dev/null
  return "$?"
}

package_extract_name()
{
  local path="$1"

  package_extract_metadata "$path" 'name'
  return "$?"
}

package_extract_version()
{
  local path="$1"

  package_extract_metadata "$path" 'version'
  return "$?"
}

package_extract_digest()
{
  local path="$1"
  local digest_type="$2"

  if ! [ "$digest_type" ]; then
    digest_type='sha512'
  fi

  package_extract_metadata "$path" "digest-$digest_type"
  return "$?"
}

package_retrieve_installed_version()
{
  local package="$1"

  cat "/srv/receipts/$package/version" 2>/dev/null
  return "$?"
}

package_install()
{
  local path="$1"

  if ! [ -r "$path" ]; then
    return 1
  fi

  local package="`package_extract_name "$path"`" &&
  local version="`package_extract_version "$path"`"

  if [ "$?" -ne 0 ]; then
    return 2
  fi
 
  mkdir -p "/srv/receipts/$package" &&
    echo -n "$version" > "/srv/receipts/$package/version"

  if [ "$?" -ne 0 ]; then
    rm -f "/srv/receipts/$package/version"
    return 3
  fi

  log "Extracting files for package '$package'"

  mkdir -p "/srv/receipts/$package" "/srv/scripts/$package" &&
    (cd /srv && ar -p "$path" package.tar.xz | xz -dc \
      | tar -xvf - > "/srv/receipts/$package/manifest") && sync

  if [ "$?" -ne 0 ]; then
    warn "Failed to extract files for package '$package' from '$path'"
    rm -f "/srv/receipts/$package"
    return 4
  fi

  if [ -x "/srv/scripts/$package/install" ]; then

    log "Running installation script for package '$package'"

    "/srv/scripts/$package/install" \
      || warn "Installation script for package '$package' failed"

    if [ "$?" -ne 0 ]; then
      rm -rf "/srv/receipts/$package"
      return 5
    fi
  else
    log "Skipping installation script for package '$package'"
    log "File '/srv/scripts/$package/install' is not executable"
  fi

  log "Successfully installed package '$package'"
  sync

  return 0
}

package_remove()
{
  local package="`basename "$1"`"

  log "Stopping services for package '$package'"

  if ! supervisor_stop "$package"; then
    warn "Failed to stop services for package '$package'"
    return 1
  fi
    
  log "Removing package '$package'"

  if [ -x "/srv/scripts/$package/remove" ]; then
    if ! "/srv/scripts/$package/remove"; then
      warn "Removal script for '$package' exited with non-zero status"
      return 2
    fi
  fi

  rm -rf "/srv/receipts/$package" \
    "/srv/storage/system/supervisor/$package"

  if [ "$?" -gt 0 ]; then
    warn "Failed to remove installation records for package '$package'"
    return 3
  fi

  log "Successfully removed package '$package'"
  sync

  return 0
}

package_update()
{
  local path="$1"
  local force_install="$2"

  local package="`package_extract_name "$path"`" &&
  local v_new="`package_extract_version "$path"`" &&
  local v_prev="`package_retrieve_installed_version "$package"`"

  log "Examining package '$package'"

  if [ "$?" -ne 0 ]; then
    warn "Failed to read metadata from package file '$file'"
    return 1
  fi

  if ! [ "$v_new" -gt 0 ] 2>/dev/null; then
    warn "Invalid package version information in file '$file'"
    return 2
  fi

  if [ "$v_prev" -gt "$v_new" -a -z "$force_install" ] 2>/dev/null; then

    warn "A newer version of '$package' is already installed"
    warn "Use the force-install option if you want to install it anyway"
    return 3

  elif [ "$v_prev" -a "$v_prev" -ne "$v_new"] 2>/dev/null; then

    log "Removing package '$package'"

    if ! package_remove "$package"; then
      warn "Failed to completely remove package '$package'"
      return 4
    fi
  fi

  if [ -z "$v_prev" -o "$v_prev" -lt "$v_new" ] 2>/dev/null; then
    force_install='t'
    log "Update required for package '$package'"
  fi

  if [ "$force_install" ]; then
    if ! package_install "$path"; then
      warn "Package '$package' encountered an error during installation"
      warn "Software installation from file '$file' was unsuccessful"
      return 5
    fi
  fi

  log "Running setup tasks for package '$package'"

  if ! package_setup "$package"; then
    warn "At least one setup script in package '$package' failed"
    warn "Your installation of '$package' may be incomplete"
    return 6
  fi

  log "Finished examining package '$package'"
  return 0
}

package_merge_environment()
{
  local package="$1"

  local env_file="/srv/scripts/$package/env"

  if [ -f "$env_file" ]; then
    source "$env_file"
    merge_environment /srv &>/dev/null
    unset merge_environment
  fi
}

package_setup()
{
  local package="`basename "$1"`"

  for script in /srv/scripts/$package/setup/*; do
    if [ -x "$script" ]; then

      local task_name="$package/`basename "$script"`"
      log "Running setup task '$task_name'..."

      "$script" >> "$log" 2>&1 \
        || warn "Setup task '$task_name' was not successful"
      
      log "Finished setup task '$task_name'"
    fi
  done

  return 0
}

package_remove_empty_directories()
{
  local package="`basename "$1"`"
  local software_dir="/srv/software/$package"

  local file_count="`
    find "$software_dir" -type f 2>/dev/null | wc -l
  `"

  [ "$?" -eq 0 ] || return 1
    
  if [ "$file_count" -eq 0 ]; then
    rm -rf "$software_dir" || return 2
  fi

  return 0
}

